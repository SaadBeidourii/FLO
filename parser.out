Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     facteur -> IDENTIFIANT ( )
Rule 7     facteur -> LIRE ( )
Rule 8     facteur -> IDENTIFIANT
Rule 9     facteur -> ENTIER
Rule 10    facteur -> ( expr )
Rule 11    produit -> produit % facteur
Rule 12    produit -> produit / facteur
Rule 13    produit -> produit * facteur
Rule 14    produit -> facteur
Rule 15    expr -> - facteur
Rule 16    expr -> expr - produit
Rule 17    expr -> expr + produit
Rule 18    expr -> produit

Unused terminals:

    NON_EGAL
    TANT_QUE
    SINON
    SUPERIEUR_OU_EGAL
    INFERIEUR_OU_EGAL
    VRAI
    NON
    SI
    OU
    NOM_VARIABLE
    BOOLEEN
    RETOURNER
    ET
    FAUX
    EGAL

Terminals, with rules where they appear:

%                    : 11
(                    : 5 6 7 10
)                    : 5 6 7 10
*                    : 13
+                    : 17
-                    : 15 16
/                    : 12
;                    : 5
BOOLEEN              : 
ECRIRE               : 5
EGAL                 : 
ENTIER               : 9
ET                   : 
FAUX                 : 
IDENTIFIANT          : 6 8
INFERIEUR_OU_EGAL    : 
LIRE                 : 7
NOM_VARIABLE         : 
NON                  : 
NON_EGAL             : 
OU                   : 
RETOURNER            : 
SI                   : 
SINON                : 
SUPERIEUR_OU_EGAL    : 
TANT_QUE             : 
VRAI                 : 
error                : 

Nonterminals, with rules where they appear:

ecrire               : 4
expr                 : 5 10 16 17
facteur              : 11 12 13 14 15
instruction          : 2 3
listeInstructions    : 1 2
produit              : 11 12 13 16 17 18
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (15) expr -> . - facteur
    (16) expr -> . expr - produit
    (17) expr -> . expr + produit
    (18) expr -> . produit
    (11) produit -> . produit % facteur
    (12) produit -> . produit / facteur
    (13) produit -> . produit * facteur
    (14) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( )
    (7) facteur -> . LIRE ( )
    (8) facteur -> . IDENTIFIANT
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 9
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 8

    (10) facteur -> ( . expr )
    (15) expr -> . - facteur
    (16) expr -> . expr - produit
    (17) expr -> . expr + produit
    (18) expr -> . produit
    (11) produit -> . produit % facteur
    (12) produit -> . produit / facteur
    (13) produit -> . produit * facteur
    (14) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( )
    (7) facteur -> . LIRE ( )
    (8) facteur -> . IDENTIFIANT
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 16
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (16) expr -> expr . - produit
    (17) expr -> expr . + produit
    )               shift and go to state 17
    -               shift and go to state 18
    +               shift and go to state 19


state 10

    (15) expr -> - . facteur
    (6) facteur -> . IDENTIFIANT ( )
    (7) facteur -> . LIRE ( )
    (8) facteur -> . IDENTIFIANT
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 20

state 11

    (14) produit -> facteur .
    %               reduce using rule 14 (produit -> facteur .)
    /               reduce using rule 14 (produit -> facteur .)
    *               reduce using rule 14 (produit -> facteur .)
    )               reduce using rule 14 (produit -> facteur .)
    -               reduce using rule 14 (produit -> facteur .)
    +               reduce using rule 14 (produit -> facteur .)


state 12

    (18) expr -> produit .
    (11) produit -> produit . % facteur
    (12) produit -> produit . / facteur
    (13) produit -> produit . * facteur
    )               reduce using rule 18 (expr -> produit .)
    -               reduce using rule 18 (expr -> produit .)
    +               reduce using rule 18 (expr -> produit .)
    %               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23


state 13

    (6) facteur -> IDENTIFIANT . ( )
    (8) facteur -> IDENTIFIANT .
    (               shift and go to state 24
    %               reduce using rule 8 (facteur -> IDENTIFIANT .)
    /               reduce using rule 8 (facteur -> IDENTIFIANT .)
    *               reduce using rule 8 (facteur -> IDENTIFIANT .)
    )               reduce using rule 8 (facteur -> IDENTIFIANT .)
    -               reduce using rule 8 (facteur -> IDENTIFIANT .)
    +               reduce using rule 8 (facteur -> IDENTIFIANT .)


state 14

    (7) facteur -> LIRE . ( )
    (               shift and go to state 25


state 15

    (9) facteur -> ENTIER .
    %               reduce using rule 9 (facteur -> ENTIER .)
    /               reduce using rule 9 (facteur -> ENTIER .)
    *               reduce using rule 9 (facteur -> ENTIER .)
    )               reduce using rule 9 (facteur -> ENTIER .)
    -               reduce using rule 9 (facteur -> ENTIER .)
    +               reduce using rule 9 (facteur -> ENTIER .)


state 16

    (10) facteur -> ( expr . )
    (16) expr -> expr . - produit
    (17) expr -> expr . + produit
    )               shift and go to state 26
    -               shift and go to state 18
    +               shift and go to state 19


state 17

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 27


state 18

    (16) expr -> expr - . produit
    (11) produit -> . produit % facteur
    (12) produit -> . produit / facteur
    (13) produit -> . produit * facteur
    (14) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( )
    (7) facteur -> . LIRE ( )
    (8) facteur -> . IDENTIFIANT
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    produit                        shift and go to state 28
    facteur                        shift and go to state 11

state 19

    (17) expr -> expr + . produit
    (11) produit -> . produit % facteur
    (12) produit -> . produit / facteur
    (13) produit -> . produit * facteur
    (14) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( )
    (7) facteur -> . LIRE ( )
    (8) facteur -> . IDENTIFIANT
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    produit                        shift and go to state 29
    facteur                        shift and go to state 11

state 20

    (15) expr -> - facteur .
    )               reduce using rule 15 (expr -> - facteur .)
    -               reduce using rule 15 (expr -> - facteur .)
    +               reduce using rule 15 (expr -> - facteur .)


state 21

    (11) produit -> produit % . facteur
    (6) facteur -> . IDENTIFIANT ( )
    (7) facteur -> . LIRE ( )
    (8) facteur -> . IDENTIFIANT
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 30

state 22

    (12) produit -> produit / . facteur
    (6) facteur -> . IDENTIFIANT ( )
    (7) facteur -> . LIRE ( )
    (8) facteur -> . IDENTIFIANT
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 31

state 23

    (13) produit -> produit * . facteur
    (6) facteur -> . IDENTIFIANT ( )
    (7) facteur -> . LIRE ( )
    (8) facteur -> . IDENTIFIANT
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 32

state 24

    (6) facteur -> IDENTIFIANT ( . )
    )               shift and go to state 33


state 25

    (7) facteur -> LIRE ( . )
    )               shift and go to state 34


state 26

    (10) facteur -> ( expr ) .
    %               reduce using rule 10 (facteur -> ( expr ) .)
    /               reduce using rule 10 (facteur -> ( expr ) .)
    *               reduce using rule 10 (facteur -> ( expr ) .)
    )               reduce using rule 10 (facteur -> ( expr ) .)
    -               reduce using rule 10 (facteur -> ( expr ) .)
    +               reduce using rule 10 (facteur -> ( expr ) .)


state 27

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 28

    (16) expr -> expr - produit .
    (11) produit -> produit . % facteur
    (12) produit -> produit . / facteur
    (13) produit -> produit . * facteur
    )               reduce using rule 16 (expr -> expr - produit .)
    -               reduce using rule 16 (expr -> expr - produit .)
    +               reduce using rule 16 (expr -> expr - produit .)
    %               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23


state 29

    (17) expr -> expr + produit .
    (11) produit -> produit . % facteur
    (12) produit -> produit . / facteur
    (13) produit -> produit . * facteur
    )               reduce using rule 17 (expr -> expr + produit .)
    -               reduce using rule 17 (expr -> expr + produit .)
    +               reduce using rule 17 (expr -> expr + produit .)
    %               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23


state 30

    (11) produit -> produit % facteur .
    %               reduce using rule 11 (produit -> produit % facteur .)
    /               reduce using rule 11 (produit -> produit % facteur .)
    *               reduce using rule 11 (produit -> produit % facteur .)
    )               reduce using rule 11 (produit -> produit % facteur .)
    -               reduce using rule 11 (produit -> produit % facteur .)
    +               reduce using rule 11 (produit -> produit % facteur .)


state 31

    (12) produit -> produit / facteur .
    %               reduce using rule 12 (produit -> produit / facteur .)
    /               reduce using rule 12 (produit -> produit / facteur .)
    *               reduce using rule 12 (produit -> produit / facteur .)
    )               reduce using rule 12 (produit -> produit / facteur .)
    -               reduce using rule 12 (produit -> produit / facteur .)
    +               reduce using rule 12 (produit -> produit / facteur .)


state 32

    (13) produit -> produit * facteur .
    %               reduce using rule 13 (produit -> produit * facteur .)
    /               reduce using rule 13 (produit -> produit * facteur .)
    *               reduce using rule 13 (produit -> produit * facteur .)
    )               reduce using rule 13 (produit -> produit * facteur .)
    -               reduce using rule 13 (produit -> produit * facteur .)
    +               reduce using rule 13 (produit -> produit * facteur .)


state 33

    (6) facteur -> IDENTIFIANT ( ) .
    %               reduce using rule 6 (facteur -> IDENTIFIANT ( ) .)
    /               reduce using rule 6 (facteur -> IDENTIFIANT ( ) .)
    *               reduce using rule 6 (facteur -> IDENTIFIANT ( ) .)
    )               reduce using rule 6 (facteur -> IDENTIFIANT ( ) .)
    -               reduce using rule 6 (facteur -> IDENTIFIANT ( ) .)
    +               reduce using rule 6 (facteur -> IDENTIFIANT ( ) .)


state 34

    (7) facteur -> LIRE ( ) .
    %               reduce using rule 7 (facteur -> LIRE ( ) .)
    /               reduce using rule 7 (facteur -> LIRE ( ) .)
    *               reduce using rule 7 (facteur -> LIRE ( ) .)
    )               reduce using rule 7 (facteur -> LIRE ( ) .)
    -               reduce using rule 7 (facteur -> LIRE ( ) .)
    +               reduce using rule 7 (facteur -> LIRE ( ) .)
