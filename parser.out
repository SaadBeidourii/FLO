Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     facteur -> IDENTIFIANT ( exprList )
Rule 7     facteur -> IDENTIFIANT ( )
Rule 8     facteur -> LIRE ( )
Rule 9     facteur -> IDENTIFIANT
Rule 10    facteur -> ENTIER
Rule 11    facteur -> ( expr )
Rule 12    produit -> produit % facteur
Rule 13    produit -> produit / facteur
Rule 14    produit -> produit * facteur
Rule 15    produit -> facteur
Rule 16    expr -> - facteur
Rule 17    expr -> expr - produit
Rule 18    expr -> expr + produit
Rule 19    expr -> produit
Rule 20    exprList -> expr , exprList
Rule 21    exprList -> expr

Unused terminals:

    SINON
    SUPERIEUR_OU_EGAL
    INFERIEUR_OU_EGAL
    SI
    TANT_QUE
    BOOLEEN
    NON_EGAL
    NON
    ET
    OU
    EGAL
    RETOURNER
    FAUX
    VRAI

Terminals, with rules where they appear:

%                    : 12
(                    : 5 6 7 8 11
)                    : 5 6 7 8 11
*                    : 14
+                    : 18
,                    : 20
-                    : 16 17
/                    : 13
;                    : 5
BOOLEEN              : 
ECRIRE               : 5
EGAL                 : 
ENTIER               : 10
ET                   : 
FAUX                 : 
IDENTIFIANT          : 6 7 9
INFERIEUR_OU_EGAL    : 
LIRE                 : 8
NON                  : 
NON_EGAL             : 
OU                   : 
RETOURNER            : 
SI                   : 
SINON                : 
SUPERIEUR_OU_EGAL    : 
TANT_QUE             : 
VRAI                 : 
error                : 

Nonterminals, with rules where they appear:

ecrire               : 4
expr                 : 5 11 17 18 20 21
exprList             : 6 20
facteur              : 12 13 14 15 16
instruction          : 2 3
listeInstructions    : 1 2
produit              : 12 13 14 17 18 19
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (16) expr -> . - facteur
    (17) expr -> . expr - produit
    (18) expr -> . expr + produit
    (19) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 9
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 8

    (11) facteur -> ( . expr )
    (16) expr -> . - facteur
    (17) expr -> . expr - produit
    (18) expr -> . expr + produit
    (19) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 16
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (17) expr -> expr . - produit
    (18) expr -> expr . + produit
    )               shift and go to state 17
    -               shift and go to state 18
    +               shift and go to state 19


state 10

    (16) expr -> - . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 20

state 11

    (15) produit -> facteur .
    %               reduce using rule 15 (produit -> facteur .)
    /               reduce using rule 15 (produit -> facteur .)
    *               reduce using rule 15 (produit -> facteur .)
    )               reduce using rule 15 (produit -> facteur .)
    -               reduce using rule 15 (produit -> facteur .)
    +               reduce using rule 15 (produit -> facteur .)
    ,               reduce using rule 15 (produit -> facteur .)


state 12

    (19) expr -> produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 19 (expr -> produit .)
    -               reduce using rule 19 (expr -> produit .)
    +               reduce using rule 19 (expr -> produit .)
    ,               reduce using rule 19 (expr -> produit .)
    %               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23


state 13

    (6) facteur -> IDENTIFIANT . ( exprList )
    (7) facteur -> IDENTIFIANT . ( )
    (9) facteur -> IDENTIFIANT .
    (               shift and go to state 24
    %               reduce using rule 9 (facteur -> IDENTIFIANT .)
    /               reduce using rule 9 (facteur -> IDENTIFIANT .)
    *               reduce using rule 9 (facteur -> IDENTIFIANT .)
    )               reduce using rule 9 (facteur -> IDENTIFIANT .)
    -               reduce using rule 9 (facteur -> IDENTIFIANT .)
    +               reduce using rule 9 (facteur -> IDENTIFIANT .)
    ,               reduce using rule 9 (facteur -> IDENTIFIANT .)


state 14

    (8) facteur -> LIRE . ( )
    (               shift and go to state 25


state 15

    (10) facteur -> ENTIER .
    %               reduce using rule 10 (facteur -> ENTIER .)
    /               reduce using rule 10 (facteur -> ENTIER .)
    *               reduce using rule 10 (facteur -> ENTIER .)
    )               reduce using rule 10 (facteur -> ENTIER .)
    -               reduce using rule 10 (facteur -> ENTIER .)
    +               reduce using rule 10 (facteur -> ENTIER .)
    ,               reduce using rule 10 (facteur -> ENTIER .)


state 16

    (11) facteur -> ( expr . )
    (17) expr -> expr . - produit
    (18) expr -> expr . + produit
    )               shift and go to state 26
    -               shift and go to state 18
    +               shift and go to state 19


state 17

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 27


state 18

    (17) expr -> expr - . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    produit                        shift and go to state 28
    facteur                        shift and go to state 11

state 19

    (18) expr -> expr + . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    produit                        shift and go to state 29
    facteur                        shift and go to state 11

state 20

    (16) expr -> - facteur .
    )               reduce using rule 16 (expr -> - facteur .)
    -               reduce using rule 16 (expr -> - facteur .)
    +               reduce using rule 16 (expr -> - facteur .)
    ,               reduce using rule 16 (expr -> - facteur .)


state 21

    (12) produit -> produit % . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 30

state 22

    (13) produit -> produit / . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 31

state 23

    (14) produit -> produit * . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 32

state 24

    (6) facteur -> IDENTIFIANT ( . exprList )
    (7) facteur -> IDENTIFIANT ( . )
    (20) exprList -> . expr , exprList
    (21) exprList -> . expr
    (16) expr -> . - facteur
    (17) expr -> . expr - produit
    (18) expr -> . expr + produit
    (19) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    )               shift and go to state 34
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    exprList                       shift and go to state 33
    expr                           shift and go to state 35
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 25

    (8) facteur -> LIRE ( . )
    )               shift and go to state 36


state 26

    (11) facteur -> ( expr ) .
    %               reduce using rule 11 (facteur -> ( expr ) .)
    /               reduce using rule 11 (facteur -> ( expr ) .)
    *               reduce using rule 11 (facteur -> ( expr ) .)
    )               reduce using rule 11 (facteur -> ( expr ) .)
    -               reduce using rule 11 (facteur -> ( expr ) .)
    +               reduce using rule 11 (facteur -> ( expr ) .)
    ,               reduce using rule 11 (facteur -> ( expr ) .)


state 27

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 28

    (17) expr -> expr - produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 17 (expr -> expr - produit .)
    -               reduce using rule 17 (expr -> expr - produit .)
    +               reduce using rule 17 (expr -> expr - produit .)
    ,               reduce using rule 17 (expr -> expr - produit .)
    %               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23


state 29

    (18) expr -> expr + produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 18 (expr -> expr + produit .)
    -               reduce using rule 18 (expr -> expr + produit .)
    +               reduce using rule 18 (expr -> expr + produit .)
    ,               reduce using rule 18 (expr -> expr + produit .)
    %               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23


state 30

    (12) produit -> produit % facteur .
    %               reduce using rule 12 (produit -> produit % facteur .)
    /               reduce using rule 12 (produit -> produit % facteur .)
    *               reduce using rule 12 (produit -> produit % facteur .)
    )               reduce using rule 12 (produit -> produit % facteur .)
    -               reduce using rule 12 (produit -> produit % facteur .)
    +               reduce using rule 12 (produit -> produit % facteur .)
    ,               reduce using rule 12 (produit -> produit % facteur .)


state 31

    (13) produit -> produit / facteur .
    %               reduce using rule 13 (produit -> produit / facteur .)
    /               reduce using rule 13 (produit -> produit / facteur .)
    *               reduce using rule 13 (produit -> produit / facteur .)
    )               reduce using rule 13 (produit -> produit / facteur .)
    -               reduce using rule 13 (produit -> produit / facteur .)
    +               reduce using rule 13 (produit -> produit / facteur .)
    ,               reduce using rule 13 (produit -> produit / facteur .)


state 32

    (14) produit -> produit * facteur .
    %               reduce using rule 14 (produit -> produit * facteur .)
    /               reduce using rule 14 (produit -> produit * facteur .)
    *               reduce using rule 14 (produit -> produit * facteur .)
    )               reduce using rule 14 (produit -> produit * facteur .)
    -               reduce using rule 14 (produit -> produit * facteur .)
    +               reduce using rule 14 (produit -> produit * facteur .)
    ,               reduce using rule 14 (produit -> produit * facteur .)


state 33

    (6) facteur -> IDENTIFIANT ( exprList . )
    )               shift and go to state 37


state 34

    (7) facteur -> IDENTIFIANT ( ) .
    %               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    /               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    *               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    )               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    -               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    +               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    ,               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)


state 35

    (20) exprList -> expr . , exprList
    (21) exprList -> expr .
    (17) expr -> expr . - produit
    (18) expr -> expr . + produit
    ,               shift and go to state 38
    )               reduce using rule 21 (exprList -> expr .)
    -               shift and go to state 18
    +               shift and go to state 19


state 36

    (8) facteur -> LIRE ( ) .
    %               reduce using rule 8 (facteur -> LIRE ( ) .)
    /               reduce using rule 8 (facteur -> LIRE ( ) .)
    *               reduce using rule 8 (facteur -> LIRE ( ) .)
    )               reduce using rule 8 (facteur -> LIRE ( ) .)
    -               reduce using rule 8 (facteur -> LIRE ( ) .)
    +               reduce using rule 8 (facteur -> LIRE ( ) .)
    ,               reduce using rule 8 (facteur -> LIRE ( ) .)


state 37

    (6) facteur -> IDENTIFIANT ( exprList ) .
    %               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    /               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    *               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    )               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    -               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    +               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    ,               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)


state 38

    (20) exprList -> expr , . exprList
    (20) exprList -> . expr , exprList
    (21) exprList -> . expr
    (16) expr -> . - facteur
    (17) expr -> . expr - produit
    (18) expr -> . expr + produit
    (19) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 35
    exprList                       shift and go to state 39
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 39

    (20) exprList -> expr , exprList .
    )               reduce using rule 20 (exprList -> expr , exprList .)
