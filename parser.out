Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     facteur -> IDENTIFIANT ( exprList )
Rule 7     facteur -> IDENTIFIANT ( )
Rule 8     facteur -> LIRE ( )
Rule 9     facteur -> IDENTIFIANT
Rule 10    facteur -> ENTIER
Rule 11    facteur -> ( expr )
Rule 12    produit -> produit % facteur
Rule 13    produit -> produit / facteur
Rule 14    produit -> produit * facteur
Rule 15    produit -> facteur
Rule 16    expr -> booleen SUPERIEUR_OU_EGAL booleen
Rule 17    expr -> booleen INFERIEUR_OU_EGAL booleen
Rule 18    expr -> booleen NON_EGAL booleen
Rule 19    expr -> booleen EGAL booleen
Rule 20    expr -> booleen OU booleen
Rule 21    expr -> booleen ET booleen
Rule 22    expr -> BOOLEEN
Rule 23    expr -> - facteur
Rule 24    expr -> expr - produit
Rule 25    expr -> expr + produit
Rule 26    expr -> produit
Rule 27    exprList -> expr , exprList
Rule 28    exprList -> expr
Rule 29    booleen -> NON booleen
Rule 30    booleen -> BOOLEEN

Unused terminals:

    TANT_QUE
    SINON
    FAUX
    RETOURNER
    VRAI
    SI

Terminals, with rules where they appear:

%                    : 12
(                    : 5 6 7 8 11
)                    : 5 6 7 8 11
*                    : 14
+                    : 25
,                    : 27
-                    : 23 24
/                    : 13
;                    : 5
BOOLEEN              : 22 30
ECRIRE               : 5
EGAL                 : 19
ENTIER               : 10
ET                   : 21
FAUX                 : 
IDENTIFIANT          : 6 7 9
INFERIEUR_OU_EGAL    : 17
LIRE                 : 8
NON                  : 29
NON_EGAL             : 18
OU                   : 20
RETOURNER            : 
SI                   : 
SINON                : 
SUPERIEUR_OU_EGAL    : 16
TANT_QUE             : 
VRAI                 : 
error                : 

Nonterminals, with rules where they appear:

booleen              : 16 16 17 17 18 18 19 19 20 20 21 21 29
ecrire               : 4
expr                 : 5 11 24 25 27 28
exprList             : 6 27
facteur              : 12 13 14 15 23
instruction          : 2 3
listeInstructions    : 1 2
produit              : 12 13 14 24 25 26
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (16) expr -> . booleen SUPERIEUR_OU_EGAL booleen
    (17) expr -> . booleen INFERIEUR_OU_EGAL booleen
    (18) expr -> . booleen NON_EGAL booleen
    (19) expr -> . booleen EGAL booleen
    (20) expr -> . booleen OU booleen
    (21) expr -> . booleen ET booleen
    (22) expr -> . BOOLEEN
    (23) expr -> . - facteur
    (24) expr -> . expr - produit
    (25) expr -> . expr + produit
    (26) expr -> . produit
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    BOOLEEN         shift and go to state 11
    -               shift and go to state 12
    NON             shift and go to state 15
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    expr                           shift and go to state 9
    booleen                        shift and go to state 10
    facteur                        shift and go to state 13
    produit                        shift and go to state 14

state 8

    (11) facteur -> ( . expr )
    (16) expr -> . booleen SUPERIEUR_OU_EGAL booleen
    (17) expr -> . booleen INFERIEUR_OU_EGAL booleen
    (18) expr -> . booleen NON_EGAL booleen
    (19) expr -> . booleen EGAL booleen
    (20) expr -> . booleen OU booleen
    (21) expr -> . booleen ET booleen
    (22) expr -> . BOOLEEN
    (23) expr -> . - facteur
    (24) expr -> . expr - produit
    (25) expr -> . expr + produit
    (26) expr -> . produit
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    BOOLEEN         shift and go to state 11
    -               shift and go to state 12
    NON             shift and go to state 15
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    expr                           shift and go to state 19
    booleen                        shift and go to state 10
    facteur                        shift and go to state 13
    produit                        shift and go to state 14

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (24) expr -> expr . - produit
    (25) expr -> expr . + produit
    )               shift and go to state 20
    -               shift and go to state 21
    +               shift and go to state 22


state 10

    (16) expr -> booleen . SUPERIEUR_OU_EGAL booleen
    (17) expr -> booleen . INFERIEUR_OU_EGAL booleen
    (18) expr -> booleen . NON_EGAL booleen
    (19) expr -> booleen . EGAL booleen
    (20) expr -> booleen . OU booleen
    (21) expr -> booleen . ET booleen
    SUPERIEUR_OU_EGAL shift and go to state 23
    INFERIEUR_OU_EGAL shift and go to state 24
    NON_EGAL        shift and go to state 25
    EGAL            shift and go to state 26
    OU              shift and go to state 27
    ET              shift and go to state 28


state 11

    (22) expr -> BOOLEEN .
    (30) booleen -> BOOLEEN .
    )               reduce using rule 22 (expr -> BOOLEEN .)
    -               reduce using rule 22 (expr -> BOOLEEN .)
    +               reduce using rule 22 (expr -> BOOLEEN .)
    ,               reduce using rule 22 (expr -> BOOLEEN .)
    SUPERIEUR_OU_EGAL reduce using rule 30 (booleen -> BOOLEEN .)
    INFERIEUR_OU_EGAL reduce using rule 30 (booleen -> BOOLEEN .)
    NON_EGAL        reduce using rule 30 (booleen -> BOOLEEN .)
    EGAL            reduce using rule 30 (booleen -> BOOLEEN .)
    OU              reduce using rule 30 (booleen -> BOOLEEN .)
    ET              reduce using rule 30 (booleen -> BOOLEEN .)


state 12

    (23) expr -> - . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    facteur                        shift and go to state 29

state 13

    (15) produit -> facteur .
    %               reduce using rule 15 (produit -> facteur .)
    /               reduce using rule 15 (produit -> facteur .)
    *               reduce using rule 15 (produit -> facteur .)
    )               reduce using rule 15 (produit -> facteur .)
    -               reduce using rule 15 (produit -> facteur .)
    +               reduce using rule 15 (produit -> facteur .)
    ,               reduce using rule 15 (produit -> facteur .)


state 14

    (26) expr -> produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 26 (expr -> produit .)
    -               reduce using rule 26 (expr -> produit .)
    +               reduce using rule 26 (expr -> produit .)
    ,               reduce using rule 26 (expr -> produit .)
    %               shift and go to state 30
    /               shift and go to state 31
    *               shift and go to state 32


state 15

    (29) booleen -> NON . booleen
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    NON             shift and go to state 15
    BOOLEEN         shift and go to state 34

    booleen                        shift and go to state 33

state 16

    (6) facteur -> IDENTIFIANT . ( exprList )
    (7) facteur -> IDENTIFIANT . ( )
    (9) facteur -> IDENTIFIANT .
    (               shift and go to state 35
    %               reduce using rule 9 (facteur -> IDENTIFIANT .)
    /               reduce using rule 9 (facteur -> IDENTIFIANT .)
    *               reduce using rule 9 (facteur -> IDENTIFIANT .)
    )               reduce using rule 9 (facteur -> IDENTIFIANT .)
    -               reduce using rule 9 (facteur -> IDENTIFIANT .)
    +               reduce using rule 9 (facteur -> IDENTIFIANT .)
    ,               reduce using rule 9 (facteur -> IDENTIFIANT .)


state 17

    (8) facteur -> LIRE . ( )
    (               shift and go to state 36


state 18

    (10) facteur -> ENTIER .
    %               reduce using rule 10 (facteur -> ENTIER .)
    /               reduce using rule 10 (facteur -> ENTIER .)
    *               reduce using rule 10 (facteur -> ENTIER .)
    )               reduce using rule 10 (facteur -> ENTIER .)
    -               reduce using rule 10 (facteur -> ENTIER .)
    +               reduce using rule 10 (facteur -> ENTIER .)
    ,               reduce using rule 10 (facteur -> ENTIER .)


state 19

    (11) facteur -> ( expr . )
    (24) expr -> expr . - produit
    (25) expr -> expr . + produit
    )               shift and go to state 37
    -               shift and go to state 21
    +               shift and go to state 22


state 20

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 38


state 21

    (24) expr -> expr - . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    produit                        shift and go to state 39
    facteur                        shift and go to state 13

state 22

    (25) expr -> expr + . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    produit                        shift and go to state 40
    facteur                        shift and go to state 13

state 23

    (16) expr -> booleen SUPERIEUR_OU_EGAL . booleen
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    NON             shift and go to state 15
    BOOLEEN         shift and go to state 34

    booleen                        shift and go to state 41

state 24

    (17) expr -> booleen INFERIEUR_OU_EGAL . booleen
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    NON             shift and go to state 15
    BOOLEEN         shift and go to state 34

    booleen                        shift and go to state 42

state 25

    (18) expr -> booleen NON_EGAL . booleen
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    NON             shift and go to state 15
    BOOLEEN         shift and go to state 34

    booleen                        shift and go to state 43

state 26

    (19) expr -> booleen EGAL . booleen
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    NON             shift and go to state 15
    BOOLEEN         shift and go to state 34

    booleen                        shift and go to state 44

state 27

    (20) expr -> booleen OU . booleen
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    NON             shift and go to state 15
    BOOLEEN         shift and go to state 34

    booleen                        shift and go to state 45

state 28

    (21) expr -> booleen ET . booleen
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    NON             shift and go to state 15
    BOOLEEN         shift and go to state 34

    booleen                        shift and go to state 46

state 29

    (23) expr -> - facteur .
    )               reduce using rule 23 (expr -> - facteur .)
    -               reduce using rule 23 (expr -> - facteur .)
    +               reduce using rule 23 (expr -> - facteur .)
    ,               reduce using rule 23 (expr -> - facteur .)


state 30

    (12) produit -> produit % . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    facteur                        shift and go to state 47

state 31

    (13) produit -> produit / . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    facteur                        shift and go to state 48

state 32

    (14) produit -> produit * . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    facteur                        shift and go to state 49

state 33

    (29) booleen -> NON booleen .
    SUPERIEUR_OU_EGAL reduce using rule 29 (booleen -> NON booleen .)
    INFERIEUR_OU_EGAL reduce using rule 29 (booleen -> NON booleen .)
    NON_EGAL        reduce using rule 29 (booleen -> NON booleen .)
    EGAL            reduce using rule 29 (booleen -> NON booleen .)
    OU              reduce using rule 29 (booleen -> NON booleen .)
    ET              reduce using rule 29 (booleen -> NON booleen .)
    )               reduce using rule 29 (booleen -> NON booleen .)
    -               reduce using rule 29 (booleen -> NON booleen .)
    +               reduce using rule 29 (booleen -> NON booleen .)
    ,               reduce using rule 29 (booleen -> NON booleen .)


state 34

    (30) booleen -> BOOLEEN .
    SUPERIEUR_OU_EGAL reduce using rule 30 (booleen -> BOOLEEN .)
    INFERIEUR_OU_EGAL reduce using rule 30 (booleen -> BOOLEEN .)
    NON_EGAL        reduce using rule 30 (booleen -> BOOLEEN .)
    EGAL            reduce using rule 30 (booleen -> BOOLEEN .)
    OU              reduce using rule 30 (booleen -> BOOLEEN .)
    ET              reduce using rule 30 (booleen -> BOOLEEN .)
    )               reduce using rule 30 (booleen -> BOOLEEN .)
    -               reduce using rule 30 (booleen -> BOOLEEN .)
    +               reduce using rule 30 (booleen -> BOOLEEN .)
    ,               reduce using rule 30 (booleen -> BOOLEEN .)


state 35

    (6) facteur -> IDENTIFIANT ( . exprList )
    (7) facteur -> IDENTIFIANT ( . )
    (27) exprList -> . expr , exprList
    (28) exprList -> . expr
    (16) expr -> . booleen SUPERIEUR_OU_EGAL booleen
    (17) expr -> . booleen INFERIEUR_OU_EGAL booleen
    (18) expr -> . booleen NON_EGAL booleen
    (19) expr -> . booleen EGAL booleen
    (20) expr -> . booleen OU booleen
    (21) expr -> . booleen ET booleen
    (22) expr -> . BOOLEEN
    (23) expr -> . - facteur
    (24) expr -> . expr - produit
    (25) expr -> . expr + produit
    (26) expr -> . produit
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    )               shift and go to state 51
    BOOLEEN         shift and go to state 11
    -               shift and go to state 12
    NON             shift and go to state 15
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    exprList                       shift and go to state 50
    expr                           shift and go to state 52
    booleen                        shift and go to state 10
    facteur                        shift and go to state 13
    produit                        shift and go to state 14

state 36

    (8) facteur -> LIRE ( . )
    )               shift and go to state 53


state 37

    (11) facteur -> ( expr ) .
    %               reduce using rule 11 (facteur -> ( expr ) .)
    /               reduce using rule 11 (facteur -> ( expr ) .)
    *               reduce using rule 11 (facteur -> ( expr ) .)
    )               reduce using rule 11 (facteur -> ( expr ) .)
    -               reduce using rule 11 (facteur -> ( expr ) .)
    +               reduce using rule 11 (facteur -> ( expr ) .)
    ,               reduce using rule 11 (facteur -> ( expr ) .)


state 38

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 39

    (24) expr -> expr - produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 24 (expr -> expr - produit .)
    -               reduce using rule 24 (expr -> expr - produit .)
    +               reduce using rule 24 (expr -> expr - produit .)
    ,               reduce using rule 24 (expr -> expr - produit .)
    %               shift and go to state 30
    /               shift and go to state 31
    *               shift and go to state 32


state 40

    (25) expr -> expr + produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 25 (expr -> expr + produit .)
    -               reduce using rule 25 (expr -> expr + produit .)
    +               reduce using rule 25 (expr -> expr + produit .)
    ,               reduce using rule 25 (expr -> expr + produit .)
    %               shift and go to state 30
    /               shift and go to state 31
    *               shift and go to state 32


state 41

    (16) expr -> booleen SUPERIEUR_OU_EGAL booleen .
    )               reduce using rule 16 (expr -> booleen SUPERIEUR_OU_EGAL booleen .)
    -               reduce using rule 16 (expr -> booleen SUPERIEUR_OU_EGAL booleen .)
    +               reduce using rule 16 (expr -> booleen SUPERIEUR_OU_EGAL booleen .)
    ,               reduce using rule 16 (expr -> booleen SUPERIEUR_OU_EGAL booleen .)


state 42

    (17) expr -> booleen INFERIEUR_OU_EGAL booleen .
    )               reduce using rule 17 (expr -> booleen INFERIEUR_OU_EGAL booleen .)
    -               reduce using rule 17 (expr -> booleen INFERIEUR_OU_EGAL booleen .)
    +               reduce using rule 17 (expr -> booleen INFERIEUR_OU_EGAL booleen .)
    ,               reduce using rule 17 (expr -> booleen INFERIEUR_OU_EGAL booleen .)


state 43

    (18) expr -> booleen NON_EGAL booleen .
    )               reduce using rule 18 (expr -> booleen NON_EGAL booleen .)
    -               reduce using rule 18 (expr -> booleen NON_EGAL booleen .)
    +               reduce using rule 18 (expr -> booleen NON_EGAL booleen .)
    ,               reduce using rule 18 (expr -> booleen NON_EGAL booleen .)


state 44

    (19) expr -> booleen EGAL booleen .
    )               reduce using rule 19 (expr -> booleen EGAL booleen .)
    -               reduce using rule 19 (expr -> booleen EGAL booleen .)
    +               reduce using rule 19 (expr -> booleen EGAL booleen .)
    ,               reduce using rule 19 (expr -> booleen EGAL booleen .)


state 45

    (20) expr -> booleen OU booleen .
    )               reduce using rule 20 (expr -> booleen OU booleen .)
    -               reduce using rule 20 (expr -> booleen OU booleen .)
    +               reduce using rule 20 (expr -> booleen OU booleen .)
    ,               reduce using rule 20 (expr -> booleen OU booleen .)


state 46

    (21) expr -> booleen ET booleen .
    )               reduce using rule 21 (expr -> booleen ET booleen .)
    -               reduce using rule 21 (expr -> booleen ET booleen .)
    +               reduce using rule 21 (expr -> booleen ET booleen .)
    ,               reduce using rule 21 (expr -> booleen ET booleen .)


state 47

    (12) produit -> produit % facteur .
    %               reduce using rule 12 (produit -> produit % facteur .)
    /               reduce using rule 12 (produit -> produit % facteur .)
    *               reduce using rule 12 (produit -> produit % facteur .)
    )               reduce using rule 12 (produit -> produit % facteur .)
    -               reduce using rule 12 (produit -> produit % facteur .)
    +               reduce using rule 12 (produit -> produit % facteur .)
    ,               reduce using rule 12 (produit -> produit % facteur .)


state 48

    (13) produit -> produit / facteur .
    %               reduce using rule 13 (produit -> produit / facteur .)
    /               reduce using rule 13 (produit -> produit / facteur .)
    *               reduce using rule 13 (produit -> produit / facteur .)
    )               reduce using rule 13 (produit -> produit / facteur .)
    -               reduce using rule 13 (produit -> produit / facteur .)
    +               reduce using rule 13 (produit -> produit / facteur .)
    ,               reduce using rule 13 (produit -> produit / facteur .)


state 49

    (14) produit -> produit * facteur .
    %               reduce using rule 14 (produit -> produit * facteur .)
    /               reduce using rule 14 (produit -> produit * facteur .)
    *               reduce using rule 14 (produit -> produit * facteur .)
    )               reduce using rule 14 (produit -> produit * facteur .)
    -               reduce using rule 14 (produit -> produit * facteur .)
    +               reduce using rule 14 (produit -> produit * facteur .)
    ,               reduce using rule 14 (produit -> produit * facteur .)


state 50

    (6) facteur -> IDENTIFIANT ( exprList . )
    )               shift and go to state 54


state 51

    (7) facteur -> IDENTIFIANT ( ) .
    %               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    /               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    *               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    )               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    -               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    +               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    ,               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)


state 52

    (27) exprList -> expr . , exprList
    (28) exprList -> expr .
    (24) expr -> expr . - produit
    (25) expr -> expr . + produit
    ,               shift and go to state 55
    )               reduce using rule 28 (exprList -> expr .)
    -               shift and go to state 21
    +               shift and go to state 22


state 53

    (8) facteur -> LIRE ( ) .
    %               reduce using rule 8 (facteur -> LIRE ( ) .)
    /               reduce using rule 8 (facteur -> LIRE ( ) .)
    *               reduce using rule 8 (facteur -> LIRE ( ) .)
    )               reduce using rule 8 (facteur -> LIRE ( ) .)
    -               reduce using rule 8 (facteur -> LIRE ( ) .)
    +               reduce using rule 8 (facteur -> LIRE ( ) .)
    ,               reduce using rule 8 (facteur -> LIRE ( ) .)


state 54

    (6) facteur -> IDENTIFIANT ( exprList ) .
    %               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    /               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    *               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    )               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    -               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    +               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    ,               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)


state 55

    (27) exprList -> expr , . exprList
    (27) exprList -> . expr , exprList
    (28) exprList -> . expr
    (16) expr -> . booleen SUPERIEUR_OU_EGAL booleen
    (17) expr -> . booleen INFERIEUR_OU_EGAL booleen
    (18) expr -> . booleen NON_EGAL booleen
    (19) expr -> . booleen EGAL booleen
    (20) expr -> . booleen OU booleen
    (21) expr -> . booleen ET booleen
    (22) expr -> . BOOLEEN
    (23) expr -> . - facteur
    (24) expr -> . expr - produit
    (25) expr -> . expr + produit
    (26) expr -> . produit
    (29) booleen -> . NON booleen
    (30) booleen -> . BOOLEEN
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    BOOLEEN         shift and go to state 11
    -               shift and go to state 12
    NON             shift and go to state 15
    IDENTIFIANT     shift and go to state 16
    LIRE            shift and go to state 17
    ENTIER          shift and go to state 18
    (               shift and go to state 8

    expr                           shift and go to state 52
    exprList                       shift and go to state 56
    booleen                        shift and go to state 10
    facteur                        shift and go to state 13
    produit                        shift and go to state 14

state 56

    (27) exprList -> expr , exprList .
    )               reduce using rule 27 (exprList -> expr , exprList .)
