Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     facteur -> IDENTIFIANT ( exprList )
Rule 7     facteur -> IDENTIFIANT ( )
Rule 8     facteur -> LIRE ( )
Rule 9     facteur -> IDENTIFIANT
Rule 10    facteur -> ENTIER
Rule 11    facteur -> ( expr )
Rule 12    produit -> produit % facteur
Rule 13    produit -> produit / facteur
Rule 14    produit -> produit * facteur
Rule 15    produit -> facteur
Rule 16    expr -> expr SUPERIEUR_OU_EGAL expr
Rule 17    expr -> expr INFERIEUR_OU_EGAL expr
Rule 18    expr -> expr NON_EGAL expr
Rule 19    expr -> expr EGAL expr
Rule 20    expr -> expr OU expr
Rule 21    expr -> expr ET expr
Rule 22    expr -> - facteur
Rule 23    expr -> expr - produit
Rule 24    expr -> expr + produit
Rule 25    expr -> produit
Rule 26    exprList -> expr , exprList
Rule 27    exprList -> expr
Rule 28    booleen -> NON booleen
Rule 29    booleen -> BOOLEEN

Unused terminals:

    SI
    TANT_QUE
    VRAI
    FAUX
    RETOURNER
    SINON

Terminals, with rules where they appear:

%                    : 12
(                    : 5 6 7 8 11
)                    : 5 6 7 8 11
*                    : 14
+                    : 24
,                    : 26
-                    : 22 23
/                    : 13
;                    : 5
BOOLEEN              : 29
ECRIRE               : 5
EGAL                 : 19
ENTIER               : 10
ET                   : 21
FAUX                 : 
IDENTIFIANT          : 6 7 9
INFERIEUR_OU_EGAL    : 17
LIRE                 : 8
NON                  : 28
NON_EGAL             : 18
OU                   : 20
RETOURNER            : 
SI                   : 
SINON                : 
SUPERIEUR_OU_EGAL    : 16
TANT_QUE             : 
VRAI                 : 
error                : 

Nonterminals, with rules where they appear:

booleen              : 28
ecrire               : 4
expr                 : 5 11 16 16 17 17 18 18 19 19 20 20 21 21 23 24 26 27
exprList             : 6 26
facteur              : 12 13 14 15 22
instruction          : 2 3
listeInstructions    : 1 2
produit              : 12 13 14 23 24 25
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 9
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 8

    (11) facteur -> ( . expr )
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 16
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
    )               shift and go to state 17
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 10

    (22) expr -> - . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 26

state 11

    (15) produit -> facteur .
    %               reduce using rule 15 (produit -> facteur .)
    /               reduce using rule 15 (produit -> facteur .)
    *               reduce using rule 15 (produit -> facteur .)
    )               reduce using rule 15 (produit -> facteur .)
    SUPERIEUR_OU_EGAL reduce using rule 15 (produit -> facteur .)
    INFERIEUR_OU_EGAL reduce using rule 15 (produit -> facteur .)
    NON_EGAL        reduce using rule 15 (produit -> facteur .)
    EGAL            reduce using rule 15 (produit -> facteur .)
    OU              reduce using rule 15 (produit -> facteur .)
    ET              reduce using rule 15 (produit -> facteur .)
    -               reduce using rule 15 (produit -> facteur .)
    +               reduce using rule 15 (produit -> facteur .)
    ,               reduce using rule 15 (produit -> facteur .)


state 12

    (25) expr -> produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 25 (expr -> produit .)
    SUPERIEUR_OU_EGAL reduce using rule 25 (expr -> produit .)
    INFERIEUR_OU_EGAL reduce using rule 25 (expr -> produit .)
    NON_EGAL        reduce using rule 25 (expr -> produit .)
    EGAL            reduce using rule 25 (expr -> produit .)
    OU              reduce using rule 25 (expr -> produit .)
    ET              reduce using rule 25 (expr -> produit .)
    -               reduce using rule 25 (expr -> produit .)
    +               reduce using rule 25 (expr -> produit .)
    ,               reduce using rule 25 (expr -> produit .)
    %               shift and go to state 27
    /               shift and go to state 28
    *               shift and go to state 29


state 13

    (6) facteur -> IDENTIFIANT . ( exprList )
    (7) facteur -> IDENTIFIANT . ( )
    (9) facteur -> IDENTIFIANT .
    (               shift and go to state 30
    %               reduce using rule 9 (facteur -> IDENTIFIANT .)
    /               reduce using rule 9 (facteur -> IDENTIFIANT .)
    *               reduce using rule 9 (facteur -> IDENTIFIANT .)
    )               reduce using rule 9 (facteur -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 9 (facteur -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 9 (facteur -> IDENTIFIANT .)
    NON_EGAL        reduce using rule 9 (facteur -> IDENTIFIANT .)
    EGAL            reduce using rule 9 (facteur -> IDENTIFIANT .)
    OU              reduce using rule 9 (facteur -> IDENTIFIANT .)
    ET              reduce using rule 9 (facteur -> IDENTIFIANT .)
    -               reduce using rule 9 (facteur -> IDENTIFIANT .)
    +               reduce using rule 9 (facteur -> IDENTIFIANT .)
    ,               reduce using rule 9 (facteur -> IDENTIFIANT .)


state 14

    (8) facteur -> LIRE . ( )
    (               shift and go to state 31


state 15

    (10) facteur -> ENTIER .
    %               reduce using rule 10 (facteur -> ENTIER .)
    /               reduce using rule 10 (facteur -> ENTIER .)
    *               reduce using rule 10 (facteur -> ENTIER .)
    )               reduce using rule 10 (facteur -> ENTIER .)
    SUPERIEUR_OU_EGAL reduce using rule 10 (facteur -> ENTIER .)
    INFERIEUR_OU_EGAL reduce using rule 10 (facteur -> ENTIER .)
    NON_EGAL        reduce using rule 10 (facteur -> ENTIER .)
    EGAL            reduce using rule 10 (facteur -> ENTIER .)
    OU              reduce using rule 10 (facteur -> ENTIER .)
    ET              reduce using rule 10 (facteur -> ENTIER .)
    -               reduce using rule 10 (facteur -> ENTIER .)
    +               reduce using rule 10 (facteur -> ENTIER .)
    ,               reduce using rule 10 (facteur -> ENTIER .)


state 16

    (11) facteur -> ( expr . )
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
    )               shift and go to state 32
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 17

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 33


state 18

    (16) expr -> expr SUPERIEUR_OU_EGAL . expr
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 34
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 19

    (17) expr -> expr INFERIEUR_OU_EGAL . expr
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 35
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 20

    (18) expr -> expr NON_EGAL . expr
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 36
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 21

    (19) expr -> expr EGAL . expr
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 37
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 22

    (20) expr -> expr OU . expr
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 38
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 23

    (21) expr -> expr ET . expr
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 39
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 24

    (23) expr -> expr - . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    produit                        shift and go to state 40
    facteur                        shift and go to state 11

state 25

    (24) expr -> expr + . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    produit                        shift and go to state 41
    facteur                        shift and go to state 11

state 26

    (22) expr -> - facteur .
    )               reduce using rule 22 (expr -> - facteur .)
    SUPERIEUR_OU_EGAL reduce using rule 22 (expr -> - facteur .)
    INFERIEUR_OU_EGAL reduce using rule 22 (expr -> - facteur .)
    NON_EGAL        reduce using rule 22 (expr -> - facteur .)
    EGAL            reduce using rule 22 (expr -> - facteur .)
    OU              reduce using rule 22 (expr -> - facteur .)
    ET              reduce using rule 22 (expr -> - facteur .)
    -               reduce using rule 22 (expr -> - facteur .)
    +               reduce using rule 22 (expr -> - facteur .)
    ,               reduce using rule 22 (expr -> - facteur .)


state 27

    (12) produit -> produit % . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 42

state 28

    (13) produit -> produit / . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 43

state 29

    (14) produit -> produit * . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    facteur                        shift and go to state 44

state 30

    (6) facteur -> IDENTIFIANT ( . exprList )
    (7) facteur -> IDENTIFIANT ( . )
    (26) exprList -> . expr , exprList
    (27) exprList -> . expr
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    )               shift and go to state 46
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    exprList                       shift and go to state 45
    expr                           shift and go to state 47
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 31

    (8) facteur -> LIRE ( . )
    )               shift and go to state 48


state 32

    (11) facteur -> ( expr ) .
    %               reduce using rule 11 (facteur -> ( expr ) .)
    /               reduce using rule 11 (facteur -> ( expr ) .)
    *               reduce using rule 11 (facteur -> ( expr ) .)
    )               reduce using rule 11 (facteur -> ( expr ) .)
    SUPERIEUR_OU_EGAL reduce using rule 11 (facteur -> ( expr ) .)
    INFERIEUR_OU_EGAL reduce using rule 11 (facteur -> ( expr ) .)
    NON_EGAL        reduce using rule 11 (facteur -> ( expr ) .)
    EGAL            reduce using rule 11 (facteur -> ( expr ) .)
    OU              reduce using rule 11 (facteur -> ( expr ) .)
    ET              reduce using rule 11 (facteur -> ( expr ) .)
    -               reduce using rule 11 (facteur -> ( expr ) .)
    +               reduce using rule 11 (facteur -> ( expr ) .)
    ,               reduce using rule 11 (facteur -> ( expr ) .)


state 33

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 34

    (16) expr -> expr SUPERIEUR_OU_EGAL expr .
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for NON_EGAL resolved as shift
  ! shift/reduce conflict for EGAL resolved as shift
  ! shift/reduce conflict for OU resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    )               reduce using rule 16 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    ,               reduce using rule 16 (expr -> expr SUPERIEUR_OU_EGAL expr .)
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 35

    (17) expr -> expr INFERIEUR_OU_EGAL expr .
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for NON_EGAL resolved as shift
  ! shift/reduce conflict for EGAL resolved as shift
  ! shift/reduce conflict for OU resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    )               reduce using rule 17 (expr -> expr INFERIEUR_OU_EGAL expr .)
    ,               reduce using rule 17 (expr -> expr INFERIEUR_OU_EGAL expr .)
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 36

    (18) expr -> expr NON_EGAL expr .
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for NON_EGAL resolved as shift
  ! shift/reduce conflict for EGAL resolved as shift
  ! shift/reduce conflict for OU resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    )               reduce using rule 18 (expr -> expr NON_EGAL expr .)
    ,               reduce using rule 18 (expr -> expr NON_EGAL expr .)
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 37

    (19) expr -> expr EGAL expr .
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for NON_EGAL resolved as shift
  ! shift/reduce conflict for EGAL resolved as shift
  ! shift/reduce conflict for OU resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    )               reduce using rule 19 (expr -> expr EGAL expr .)
    ,               reduce using rule 19 (expr -> expr EGAL expr .)
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 38

    (20) expr -> expr OU expr .
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for NON_EGAL resolved as shift
  ! shift/reduce conflict for EGAL resolved as shift
  ! shift/reduce conflict for OU resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    )               reduce using rule 20 (expr -> expr OU expr .)
    ,               reduce using rule 20 (expr -> expr OU expr .)
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 39

    (21) expr -> expr ET expr .
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for NON_EGAL resolved as shift
  ! shift/reduce conflict for EGAL resolved as shift
  ! shift/reduce conflict for OU resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    )               reduce using rule 21 (expr -> expr ET expr .)
    ,               reduce using rule 21 (expr -> expr ET expr .)
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 40

    (23) expr -> expr - produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 23 (expr -> expr - produit .)
    SUPERIEUR_OU_EGAL reduce using rule 23 (expr -> expr - produit .)
    INFERIEUR_OU_EGAL reduce using rule 23 (expr -> expr - produit .)
    NON_EGAL        reduce using rule 23 (expr -> expr - produit .)
    EGAL            reduce using rule 23 (expr -> expr - produit .)
    OU              reduce using rule 23 (expr -> expr - produit .)
    ET              reduce using rule 23 (expr -> expr - produit .)
    -               reduce using rule 23 (expr -> expr - produit .)
    +               reduce using rule 23 (expr -> expr - produit .)
    ,               reduce using rule 23 (expr -> expr - produit .)
    %               shift and go to state 27
    /               shift and go to state 28
    *               shift and go to state 29


state 41

    (24) expr -> expr + produit .
    (12) produit -> produit . % facteur
    (13) produit -> produit . / facteur
    (14) produit -> produit . * facteur
    )               reduce using rule 24 (expr -> expr + produit .)
    SUPERIEUR_OU_EGAL reduce using rule 24 (expr -> expr + produit .)
    INFERIEUR_OU_EGAL reduce using rule 24 (expr -> expr + produit .)
    NON_EGAL        reduce using rule 24 (expr -> expr + produit .)
    EGAL            reduce using rule 24 (expr -> expr + produit .)
    OU              reduce using rule 24 (expr -> expr + produit .)
    ET              reduce using rule 24 (expr -> expr + produit .)
    -               reduce using rule 24 (expr -> expr + produit .)
    +               reduce using rule 24 (expr -> expr + produit .)
    ,               reduce using rule 24 (expr -> expr + produit .)
    %               shift and go to state 27
    /               shift and go to state 28
    *               shift and go to state 29


state 42

    (12) produit -> produit % facteur .
    %               reduce using rule 12 (produit -> produit % facteur .)
    /               reduce using rule 12 (produit -> produit % facteur .)
    *               reduce using rule 12 (produit -> produit % facteur .)
    )               reduce using rule 12 (produit -> produit % facteur .)
    SUPERIEUR_OU_EGAL reduce using rule 12 (produit -> produit % facteur .)
    INFERIEUR_OU_EGAL reduce using rule 12 (produit -> produit % facteur .)
    NON_EGAL        reduce using rule 12 (produit -> produit % facteur .)
    EGAL            reduce using rule 12 (produit -> produit % facteur .)
    OU              reduce using rule 12 (produit -> produit % facteur .)
    ET              reduce using rule 12 (produit -> produit % facteur .)
    -               reduce using rule 12 (produit -> produit % facteur .)
    +               reduce using rule 12 (produit -> produit % facteur .)
    ,               reduce using rule 12 (produit -> produit % facteur .)


state 43

    (13) produit -> produit / facteur .
    %               reduce using rule 13 (produit -> produit / facteur .)
    /               reduce using rule 13 (produit -> produit / facteur .)
    *               reduce using rule 13 (produit -> produit / facteur .)
    )               reduce using rule 13 (produit -> produit / facteur .)
    SUPERIEUR_OU_EGAL reduce using rule 13 (produit -> produit / facteur .)
    INFERIEUR_OU_EGAL reduce using rule 13 (produit -> produit / facteur .)
    NON_EGAL        reduce using rule 13 (produit -> produit / facteur .)
    EGAL            reduce using rule 13 (produit -> produit / facteur .)
    OU              reduce using rule 13 (produit -> produit / facteur .)
    ET              reduce using rule 13 (produit -> produit / facteur .)
    -               reduce using rule 13 (produit -> produit / facteur .)
    +               reduce using rule 13 (produit -> produit / facteur .)
    ,               reduce using rule 13 (produit -> produit / facteur .)


state 44

    (14) produit -> produit * facteur .
    %               reduce using rule 14 (produit -> produit * facteur .)
    /               reduce using rule 14 (produit -> produit * facteur .)
    *               reduce using rule 14 (produit -> produit * facteur .)
    )               reduce using rule 14 (produit -> produit * facteur .)
    SUPERIEUR_OU_EGAL reduce using rule 14 (produit -> produit * facteur .)
    INFERIEUR_OU_EGAL reduce using rule 14 (produit -> produit * facteur .)
    NON_EGAL        reduce using rule 14 (produit -> produit * facteur .)
    EGAL            reduce using rule 14 (produit -> produit * facteur .)
    OU              reduce using rule 14 (produit -> produit * facteur .)
    ET              reduce using rule 14 (produit -> produit * facteur .)
    -               reduce using rule 14 (produit -> produit * facteur .)
    +               reduce using rule 14 (produit -> produit * facteur .)
    ,               reduce using rule 14 (produit -> produit * facteur .)


state 45

    (6) facteur -> IDENTIFIANT ( exprList . )
    )               shift and go to state 49


state 46

    (7) facteur -> IDENTIFIANT ( ) .
    %               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    /               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    *               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    )               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    INFERIEUR_OU_EGAL reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    NON_EGAL        reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    EGAL            reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    OU              reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    ET              reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    -               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    +               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)
    ,               reduce using rule 7 (facteur -> IDENTIFIANT ( ) .)


state 47

    (26) exprList -> expr . , exprList
    (27) exprList -> expr .
    (16) expr -> expr . SUPERIEUR_OU_EGAL expr
    (17) expr -> expr . INFERIEUR_OU_EGAL expr
    (18) expr -> expr . NON_EGAL expr
    (19) expr -> expr . EGAL expr
    (20) expr -> expr . OU expr
    (21) expr -> expr . ET expr
    (23) expr -> expr . - produit
    (24) expr -> expr . + produit
    ,               shift and go to state 50
    )               reduce using rule 27 (exprList -> expr .)
    SUPERIEUR_OU_EGAL shift and go to state 18
    INFERIEUR_OU_EGAL shift and go to state 19
    NON_EGAL        shift and go to state 20
    EGAL            shift and go to state 21
    OU              shift and go to state 22
    ET              shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 48

    (8) facteur -> LIRE ( ) .
    %               reduce using rule 8 (facteur -> LIRE ( ) .)
    /               reduce using rule 8 (facteur -> LIRE ( ) .)
    *               reduce using rule 8 (facteur -> LIRE ( ) .)
    )               reduce using rule 8 (facteur -> LIRE ( ) .)
    SUPERIEUR_OU_EGAL reduce using rule 8 (facteur -> LIRE ( ) .)
    INFERIEUR_OU_EGAL reduce using rule 8 (facteur -> LIRE ( ) .)
    NON_EGAL        reduce using rule 8 (facteur -> LIRE ( ) .)
    EGAL            reduce using rule 8 (facteur -> LIRE ( ) .)
    OU              reduce using rule 8 (facteur -> LIRE ( ) .)
    ET              reduce using rule 8 (facteur -> LIRE ( ) .)
    -               reduce using rule 8 (facteur -> LIRE ( ) .)
    +               reduce using rule 8 (facteur -> LIRE ( ) .)
    ,               reduce using rule 8 (facteur -> LIRE ( ) .)


state 49

    (6) facteur -> IDENTIFIANT ( exprList ) .
    %               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    /               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    *               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    )               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    SUPERIEUR_OU_EGAL reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    INFERIEUR_OU_EGAL reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    NON_EGAL        reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    EGAL            reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    OU              reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    ET              reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    -               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    +               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)
    ,               reduce using rule 6 (facteur -> IDENTIFIANT ( exprList ) .)


state 50

    (26) exprList -> expr , . exprList
    (26) exprList -> . expr , exprList
    (27) exprList -> . expr
    (16) expr -> . expr SUPERIEUR_OU_EGAL expr
    (17) expr -> . expr INFERIEUR_OU_EGAL expr
    (18) expr -> . expr NON_EGAL expr
    (19) expr -> . expr EGAL expr
    (20) expr -> . expr OU expr
    (21) expr -> . expr ET expr
    (22) expr -> . - facteur
    (23) expr -> . expr - produit
    (24) expr -> . expr + produit
    (25) expr -> . produit
    (12) produit -> . produit % facteur
    (13) produit -> . produit / facteur
    (14) produit -> . produit * facteur
    (15) produit -> . facteur
    (6) facteur -> . IDENTIFIANT ( exprList )
    (7) facteur -> . IDENTIFIANT ( )
    (8) facteur -> . LIRE ( )
    (9) facteur -> . IDENTIFIANT
    (10) facteur -> . ENTIER
    (11) facteur -> . ( expr )
    -               shift and go to state 10
    IDENTIFIANT     shift and go to state 13
    LIRE            shift and go to state 14
    ENTIER          shift and go to state 15
    (               shift and go to state 8

    expr                           shift and go to state 47
    exprList                       shift and go to state 51
    facteur                        shift and go to state 11
    produit                        shift and go to state 12

state 51

    (26) exprList -> expr , exprList .
    )               reduce using rule 26 (exprList -> expr , exprList .)


Conflicts:

shift/reduce conflict for SUPERIEUR_OU_EGAL in state 34 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 34 resolved as shift
shift/reduce conflict for NON_EGAL in state 34 resolved as shift
shift/reduce conflict for EGAL in state 34 resolved as shift
shift/reduce conflict for OU in state 34 resolved as shift
shift/reduce conflict for ET in state 34 resolved as shift
shift/reduce conflict for - in state 34 resolved as shift
shift/reduce conflict for + in state 34 resolved as shift
shift/reduce conflict for SUPERIEUR_OU_EGAL in state 35 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 35 resolved as shift
shift/reduce conflict for NON_EGAL in state 35 resolved as shift
shift/reduce conflict for EGAL in state 35 resolved as shift
shift/reduce conflict for OU in state 35 resolved as shift
shift/reduce conflict for ET in state 35 resolved as shift
shift/reduce conflict for - in state 35 resolved as shift
shift/reduce conflict for + in state 35 resolved as shift
shift/reduce conflict for SUPERIEUR_OU_EGAL in state 36 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 36 resolved as shift
shift/reduce conflict for NON_EGAL in state 36 resolved as shift
shift/reduce conflict for EGAL in state 36 resolved as shift
shift/reduce conflict for OU in state 36 resolved as shift
shift/reduce conflict for ET in state 36 resolved as shift
shift/reduce conflict for - in state 36 resolved as shift
shift/reduce conflict for + in state 36 resolved as shift
shift/reduce conflict for SUPERIEUR_OU_EGAL in state 37 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 37 resolved as shift
shift/reduce conflict for NON_EGAL in state 37 resolved as shift
shift/reduce conflict for EGAL in state 37 resolved as shift
shift/reduce conflict for OU in state 37 resolved as shift
shift/reduce conflict for ET in state 37 resolved as shift
shift/reduce conflict for - in state 37 resolved as shift
shift/reduce conflict for + in state 37 resolved as shift
shift/reduce conflict for SUPERIEUR_OU_EGAL in state 38 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 38 resolved as shift
shift/reduce conflict for NON_EGAL in state 38 resolved as shift
shift/reduce conflict for EGAL in state 38 resolved as shift
shift/reduce conflict for OU in state 38 resolved as shift
shift/reduce conflict for ET in state 38 resolved as shift
shift/reduce conflict for - in state 38 resolved as shift
shift/reduce conflict for + in state 38 resolved as shift
shift/reduce conflict for SUPERIEUR_OU_EGAL in state 39 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 39 resolved as shift
shift/reduce conflict for NON_EGAL in state 39 resolved as shift
shift/reduce conflict for EGAL in state 39 resolved as shift
shift/reduce conflict for OU in state 39 resolved as shift
shift/reduce conflict for ET in state 39 resolved as shift
shift/reduce conflict for - in state 39 resolved as shift
shift/reduce conflict for + in state 39 resolved as shift